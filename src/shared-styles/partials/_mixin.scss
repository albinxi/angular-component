/* Mixin for setting range size, separate each size range for different definition */
@mixin set-size($attribute: 'margin', $prefix: '-') {
  $from: 0; $to: 100;
  @if $attribute == 'margin' {
    @for $i from $from through $to {
      .m#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'margin-#{$default-direction}' {
    @for $i from $from through $to {
      .m-#{$default-direction-short}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'margin-#{$opposite-direction}' {
    @for $i from $from through $to {
      .m-#{$opposite-direction-short}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'margin-top' {
    @for $i from $from through $to {
      .m-t#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'margin-bottom' {
    @for $i from $from through $to {
      .m-b#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'padding' {
    @for $i from $from through $to {
      .p#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'padding-#{$default-direction}' {
    @for $i from $from through $to {
      .p-#{$default-direction-short}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'padding-#{$opposite-direction}' {
    @for $i from $from through $to {
      .p-#{$opposite-direction-short}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'padding-top' {
    @for $i from $from through $to {
      .p-t#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'padding-bottom' {
    @for $i from $from through $to {
      .p-b#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
    
  }

  @if $attribute == 'width' {
    @for $i from $from through $to {
      .w#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }

  @if $attribute == 'width-percent' {
    @for $i from $from through $to {
      .w#{$prefix}p#{$prefix}#{$i} {
        width: #{$i + '%'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        width: #{$i + '%'} !important;
      }
    }
  }

  @if $attribute == 'height-percent' {
    @for $i from $from through $to {
      .h#{$prefix}p#{$prefix}#{$i} {
        height: #{$i + '%'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        height: #{$i + '%'} !important;
      }
    }
  }

  @if $attribute == 'gap' {
    @for $i from $from through $to {
      .g#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'};
      }
      .#{$attribute}#{$prefix}#{$i} {
        #{$attribute}: #{$i + 'px'} !important;
      }
    }
  }
}

@mixin justify-content() {
  &.space-around { justify-content: space-around; }
  &.space-between { justify-content: space-between; }
  &.start { justify-content: flex-start; }
  &.content-center { align-content: center; }
  &.item-center { align-items: center; }
}

@mixin grid-column($column-num: 2, $gap: 10px) {
  @if $column-num == 2 {
    @for $i from 1 through 100 {
      &.column-#{$i}-#{100 - $i}, &.c-#{$i}-#{100 - $i} {
        grid-template-columns: #{$i + '%'} #{100-$i + '%'};
        gap: $gap;
      }
    }
  }

  @if $column-num == 3 {
    $max: 100; $step: 10; $from: ceil(1 / $step);

    @for $i from $from through ($max / $step) {
      $i: $i * $step;
      $value: percentage($i) ;

      @if $i < 40 {
        // condition: 1:1:rest, 1:rest:1, rest:1:1
        &.column-#{$i}-#{$i}-#{$max - 2 * $i} {
          grid-template-columns: percentage($i / $max) percentage($i / $max) percentage(($max - 2 * $i) / $max);
          gap: $gap;
        }
        &.column-#{$i}-#{$max - 2 * $i}-#{$i} {
          grid-template-columns: percentage($i / $max) percentage(($max - 2 * $i) / $max) percentage($i / $max);
          gap: $gap;
        }
        &.column-#{$max - 2 * $i}-#{$i}-#{$i} {
          grid-template-columns: percentage(($max - 2 * $i) / $max) percentage($i / $max) percentage($i / $max);
          gap: $gap;
        }
        
        // condition: 1:2:rest, 2:1:rest, 1:rest:2, 2:rest:1, rest:1:2, rest:2:1
        &.column-#{$i}-#{2 * $i}-#{$max - 3 * $i} {
          grid-template-columns: percentage($i / $max) percentage(2 * $i / $max) percentage(($max - 3 * $i) / $max);
          gap: $gap;
        }
        &.column-#{2 * $i}-#{$i}-#{$max - 3 * $i} {
          grid-template-columns: percentage(2 * $i / $max) percentage($i / $max) percentage(($max - 3 * $i) / $max);
          gap: $gap;
        }
        &.column-#{$i}-#{$max - 3 * $i}-#{2 * $i} {
          grid-template-columns: percentage($i / $max) percentage(($max - 3 * $i) / $max) percentage(2 * $i / $max);
          gap: $gap;
        }
        &.column-#{2 * $i}-#{$max - 3 * $i}-#{$i} {
          grid-template-columns: percentage(2 * $i / $max) percentage(($max - 3 * $i) / $max) percentage($i / $max);
          gap: $gap;
        }
        &.column-#{$max - 3 * $i}-#{$i}-#{2 * $i} {
          grid-template-columns: percentage(($max - 3 * $i) / $max) percentage($i / $max) percentage(2 * $i / $max);
          gap: $gap;
        }
        &.column-#{$max - 3 * $i}-#{2 * $i}-#{$i} {
          grid-template-columns: percentage(($max - 3 * $i) / $max) percentage(2 * $i / $max) percentage($i / $max);
          gap: $gap;
        }

        @if $i < 30 {
          // condition: 1:3:rest, 3:1:rest, 1:rest:3, 3:rest:1, rest:1:3, rest:3:1
          &.column-#{$i}-#{3 * $i}-#{$max - 4 * $i} {
            grid-template-columns: percentage($i / $max) percentage(3 * $i / $max) percentage(($max - 4 * $i) / $max);
            gap: $gap;
          }
          &.column-#{3 * $i}-#{$i}-#{$max - 4 * $i} {
            grid-template-columns: percentage(3 * $i / $max) percentage($i / $max) percentage(($max - 4 * $i) / $max);
            gap: $gap;
          }

          &.column-#{$i}-#{$max - 4 * $i}-#{3 * $i} {
            grid-template-columns: percentage($i / $max) percentage(($max - 4 * $i) / $max) percentage(3 * $i / $max);
            gap: $gap;
          }
          &.column-#{3 * $i}-#{$max - 4 * $i}-#{$i} {
            grid-template-columns: percentage(3 * $i / $max) percentage(($max - 4 * $i) / $max) percentage($i / $max);
            gap: $gap;
          }

          &.column-#{$max - 4 * $i}-#{$i}-#{3 * $i} {
            grid-template-columns: percentage(($max - 4 * $i) / $max) percentage($i / $max) percentage(3 * $i / $max);
            gap: $gap;
          }
          &.column-#{$max - 4 * $i}-#{3 * $i}-#{$i} {
            grid-template-columns: percentage(($max - 4 * $i) / $max) percentage(3 * $i / $max) percentage($i / $max);
            gap: $gap;
          }
        }

        @if $i < 20 {
          // condition: 1:4:rest, 4:1:rest, 1:rest:4, 4:rest:1, rest:1:4, rest:4:1
          &.column-#{$i}-#{4 * $i}-#{100 - 5 * $i} {
            grid-template-columns: percentage($i / $max) percentage(4 * $i / $max) percentage(($max - 5 * $i) / $max);
            gap: $gap;
          }
          &.column-#{4 * $i}-#{$i}-#{$max - 5 * $i} {
            grid-template-columns: percentage(4 * $i / $max) percentage($i / $max) percentage(($max - 5 * $i) / $max);
            gap: $gap;
          }
          &.column-#{$i}-#{$max - 5 * $i}-#{4 * $i} {
            grid-template-columns: percentage($i / $max) percentage(($max - 5 * $i) / $max) percentage(4 * $i / $max);
            gap: $gap;
          }
          &.column-#{4 * $i}-#{$max - 5 * $i}-#{$i} {
            grid-template-columns: percentage(4 * $i / $max) percentage(($max - 5 * $i) / $max) percentage($i / $max);
            gap: $gap;
          }
          &.column-#{$max - 5 * $i}-#{$i}-#{4 * $i} {
            grid-template-columns: percentage(($max - 5 * $i) / $max) percentage($i / $max) percentage(4 * $i / $max);
            gap: $gap;
          }
          &.column-#{$max - 5 * $i}-#{4 * $i}-#{$i} {
            grid-template-columns: percentage(($max - 5 * $i) / $max) percentage(4 * $i / $max) percentage($i / $max);
            gap: $gap;
          }
        }

        @if $i == 10 {
          // condition: 1:5:rest, 5:1:rest, 1:rest:5, 5:rest:1, rest:1:5, rest:5:1
          &.column-#{$i}-#{5 * $i}-#{100 - 6 * $i} {
            grid-template-columns: percentage($i / $max) percentage(5 * $i / $max) percentage(($max - 6 * $i) / $max);
            gap: $gap;
          }
          &.column-#{5 * $i}-#{$i}-#{$max - 6 * $i} {
            grid-template-columns: percentage(5 * $i / $max) percentage($i / $max) percentage(($max - 6 * $i) / $max);
            gap: $gap;
          }
          &.column-#{$i}-#{$max - 6 * $i}-#{5 * $i} {
            grid-template-columns: percentage($i / $max) percentage(($max - 6 * $i) / $max) percentage(5 * $i / $max);
            gap: $gap;
          }
          &.column-#{5 * $i}-#{$max - 6 * $i}-#{$i} {
            grid-template-columns: percentage(5 * $i / $max) percentage(($max - 6 * $i) / $max) percentage($i / $max);
            gap: $gap;
          }
          &.column-#{$max - 6 * $i}-#{$i}-#{5 * $i} {
            grid-template-columns: percentage(($max - 6 * $i) / $max) percentage($i / $max) percentage(5 * $i / $max);
            gap: $gap;
          }
          &.column-#{$max - 6 * $i}-#{5 * $i}-#{$i} {
            grid-template-columns: percentage(($max - 6 * $i) / $max) percentage(5 * $i / $max) percentage($i / $max);
            gap: $gap;
          }
        }
      }
    }
  }

  @if $column-num == 4 {
    // TODO
  }

  @if $column-num == 5 {
    // TODO
  }
}

@mixin grid-responsive() {
  // small
  @for $i from 1 to 5 {
    &.column-small-#{$i}, &.column-s-#{$i} {
      @media #{$small-only} {
        grid-template-columns: repeat($i, 1fr);
      }
    }
  }
  // medium
  @for $i from 2 to 5 {
    &.column-medium-#{$i}, &.column-m-#{$i} {
      @media #{$medium-only} {
        grid-template-columns: repeat($i, 1fr);
      }
    }
  }
  // large
  @for $i from 2 to 5 {
    &.column-large-#{$i}, &.column-l-#{$i} {
      @media #{$large-only} {
        grid-template-columns: repeat($i, 1fr);
      }
    }
  }
}

@mixin grid-row($row-num, $col-num) {

}
